AWSTemplateFormatVersion: 2010-09-09
Description: Pipeline approval Notification to Microsoft teams

#-----------------------------------------------------------------------------
#Parameters
#-----------------------------------------------------------------------------
Parameters:

  TeamsURL:
    Description: "Incoming Microsoft Teams Webhook URL"
    Type: String
    #Herc URl
    Default: "https://hercrentals.webhook.office.com/webhookb2/42127935-7f7c-47da-9e25-a07aa401fd6f@2e5b5cea-36de-471c-a3a2-456b95871db9/IncomingWebhook/c1de16bd75e7447381fc6d2d0b3535a8/3e974916-c8ef-43e8-97b0-ec9ae1ca445f"
    #DeloitteDevopsUrl
    #Default: "https://deloitte.webhook.office.com/webhookb2/79589173-7693-4d17-9763-1aec2148c66e@36da45f1-dd2c-4d1f-af13-5abe46b99921/IncomingWebhook/399892bacb0e49988ef0786ec4d4b7c9/4ea7e67b-20c3-4773-bc1b-d82aa1940d79"
    

  # CodePipelineName:
  #   Description: "Codepipeline Name"
  #   Type: String
  #   Default: "telematics-eks-light-api" 

#-----------------------------------------------------------------------------
#Resources
#-----------------------------------------------------------------------------
Resources:
  NotificationLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: index.index_handler
      Code:
        ZipFile: |
          import urllib3
          import json
          import os
          import boto3
          from datetime import datetime
          http = urllib3.PoolManager()
          def index_handler(event, context):
              pipeline = boto3.client('codepipeline')
              event_message = event['Records'][0]['Sns']['Message']
              message_dict = json.loads(event_message)
              pipeline_name = message_dict["detail"]["pipeline"]
              response = pipeline.get_pipeline(name = pipeline_name)
              stage = response['pipeline']['stages']
              sts = boto3.client('sts')
              sts_val = sts.get_caller_identity()
              user = sts_val['UserId']
              url = os.environ['TEAMS_URL']
              #event_message = event['Records'][0]['Sns']['Message']
              #pipeline_name = message_dict["detail"]["pipeline"]
              pipeline_status = message_dict["detail"]["state"]
              execution_id = message_dict["detail"]["execution-id"]
              # text = f"Code Pipeline: {pipeline_name} with execution-id {execution_id} has: {pipeline_status}."
              aws_account_id = message_dict['account']
              aws_region = message_dict['region']
              event_time = sts_val['ResponseMetadata']['HTTPHeaders']['date']
              # event_time = datetime.now().isoformat(timespec='seconds')
              color = '#808080'
              if pipeline_status=="SUCCEEDED" : 
                  title = "Code Pipeline Success"
                  color = '#00ff00'
              elif pipeline_status== "STARTED" : 
                  title = "Code Pipeline Started"
                  color = '#FFFF00'
              elif pipeline_status== "FAILED" : 
                  title = "Code Pipeline Failed"
                  color = '#ff0000'
              
              pipeline_url = f'''https://console.aws.amazon.com/codesuite/codepipeline/pipelines/{pipeline_name}/view?region={aws_region}'''
              for i in stage:
                  actions = i['actions']
                  for x in actions:
                      stage_name = x['name']
                      provider = x['actionTypeId']['provider']
                      category = x['actionTypeId']['category']
                      print(stage_name)
                      config = x['configuration']
                      if(category == 'Source' and provider == 'CodeCommit'):
                          branchname = config['BranchName']
                          reponame = config['RepositoryName']
              
              msg = {
                  "@context": "https://schema.org/extensions",
                  "@type": "MessageCard",
                  "themeColor": color,
                  "text": "Herc Rentals",
                  "title": title,
                  "sections": [{
                      "facts": [{
                          "name": "Pipeline",
                          "value": f"{pipeline_name}"
                      }, {
                          "name": "Repository Name",
                          "value": f"{reponame}"
                      }, {
                          "name": "Branch Name",
                          "value": f"{branchname}"
                      }, {
                          "name": "Execution Id",
                          "value": f"{execution_id}"
                      }, {
                          "name": "Status",
                          "value": f"{pipeline_status}"
                      }, {
                          "name": "Execution Time",
                          "value": f"{event_time}"
                      }, {
                          "name": "User Id",
                          "value": f"{user}"
                      }],
                      "markdown": True
                  }],
                  "potentialAction": [{
                              
                      "@type": "OpenUri",
                      "name": "Approve",
                      "targets": [{
                          "os": "default",
                          "uri": pipeline_url
                      }]
                  }
                  ]
                  
              }
              encoded_msg = json.dumps(msg).encode('utf-8')
              resp = http.request('POST', url, body=encoded_msg)
              print({
                  "message": pipeline_name,
                  "status_code": resp.status,
                  "response": resp.data
              })
          #     message = {
          #         "mailContentType": "text",
          #         "mailBody": text,
          #         "mailSubject": title,
          #         "toAddresses": os.environ["EMAIL_LIST"]
          #     }
          #     boto3.client("sns").publish(
          #         TargetArn=os.environ["SNS_TOPIC"],
          #         Message=json.dumps(message),
          #     )

      MemorySize: 128
      Environment:
        Variables:
          TEAMS_URL: !Ref TeamsURL
      Runtime: 'python3.7'
      Timeout: 30
      Role: !GetAtt NotificationLambdaFunctioneRole.Arn
  NotificationLambdaFunctioneRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'customresource'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'sns:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'codepipeline:GetPipeline'
                  - 'codepipeline:GetActionType'
                  - 'codepipeline:ListTagsForResource'
                  - 'codepipeline:GetThirdPartyJobDetails'
                  - 'codepipeline:GetJobDetails'
                  - 'codepipeline:ListActionExecutions'
                  - 'codepipeline:ListPipelines'
                  - 'codepipeline:GetPipelineExecution'
                  - 'codepipeline:ListWebhooks'
                  - 'codepipeline:GetPipelineState'
                  - 'codepipeline:ListActionTypes'
                  - 'codepipeline:ListPipelineExecutions'
                  - 'iam:Get*'
                  - 'iam:List*'
                Resource: '*'
                
  EventRule:
    DependsOn: NotificationLambdaFunction
    Type: AWS::Events::Rule
    Properties:
      Description: "EventRule"
      EventPattern:
        source:
          - "aws.codepipeline"
        # detail-type:
        #   - "CodePipeline Pipeline Execution State Change"
        # detail:
        #   state:
        #     - "STARTED"
        #     - "SUCCEEDED"
        #     - "FAILED"
        #   # pipeline:
        #   #   - !Ref CodePipelineName
        # resources:
        #   - !Sub 'arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:*'
      State: "ENABLED"
      Targets:
        -
          Arn:
            Ref: "SNSTopic"
          Id: "NotificationTeams"
  PermissionLambda:
      DependsOn: NotificationLambdaFunction
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: "NotificationLambdaFunction"
        Action: "lambda:InvokeFunction"
        Principal: "sns.amazonaws.com"
        SourceArn: !Ref SNSTopic
  SNSTopic:
      DependsOn: NotificationLambdaFunction
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: String
        Subscription:
          - Protocol: lambda
            Endpoint: !GetAtt NotificationLambdaFunction.Arn
  SnsTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    DependsOn: SNSTopic
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: SnsTopicPolicy
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
              - "SNS:GetTopicAttributes"
              - "SNS:SetTopicAttributes"
              - "SNS:AddPermission"
              - "SNS:RemovePermission"
              - "SNS:DeleteTopic"
              - "SNS:Subscribe"
              - "SNS:ListSubscriptionsByTopic"
              - "SNS:Publish"
              - "SNS:Receive"
            Resource:
              Ref: SNSTopic
          - Sid: SnsTopicPolicyEvent
            Effect: Allow
            Principal:
              Service: "events.amazonaws.com"
            Action:
              - "SNS:Publish"
            Resource:
              Ref: SNSTopic
      Topics:
        - Ref: SNSTopic
